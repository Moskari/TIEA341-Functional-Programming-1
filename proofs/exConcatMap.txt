map f []     = []             -- Map.1
map f (x:xs) = f x : map f xs -- Map.2

concat []     = []             -- Concat.1 
concat (x:xs) = x ++ concat xs -- Concat.2



a.
Show that concat (map f x:map (map f) xs) == map f x ++ concat (map (map f) xs)

concat (map f x:map (map f) xs)
== {- Concat.2, concat (y:ys) = x ++ concat xs -}
map f x ++ concat (map (map f) xs)

b. 
Show that map f x ++ map f y == map f (x++y) for all lists x, y and arbitrary and a well behaving function f.

[]     ++ ys = ys               -- (++).1
(x:xs) ++ ys = x:(xs++ys)       -- (++).2

map f []     = []               -- Map.1
map f (x:xs) = f x : map f xs   -- Map.2

f :: a -> b
Proof: map f x ++ map f y == map f (x++y)

Case of empty lists:
map f [] ++ map f []
== {- Map.1 -}
[] ++ []
== {- (++).1 -}
[]
== {- Map.1, in reverse-}
map f []
== {- (++).1, in reverse -}
map f ([] ++ [])

Case of lists of lenght N
map f (x:xs) ++ map f (y)
== {- Map.2 -}
(f x : map f xs) ++ (map f y)
== {- (++).2 -}
f x : (map f xs ++ map f y)
== {- Assumption -}
f x : map f (xs++y)
== {- Map.2, in reverse -}
map f (x:(xs++y))
== {- (++).2, in reverse, Ananasak‰‰m‰! -}
map f (x:xs++y)
